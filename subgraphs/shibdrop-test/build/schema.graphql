type AllowListUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  previousMerkleRoot: Bytes! # bytes32
  newMerkleRoot: Bytes! # bytes32
  publicKeyURI: [String!]! # string[]
  allowListURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AllowedFeeRecipientUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  feeRecipient: Bytes! # address
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreatorPayoutAddressUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  newPayoutAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DropURIUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  newDropURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayerUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  payer: Bytes! # address
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicDropUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  publicDrop_mintPrice: BigInt! # uint80
  publicDrop_startTime: BigInt! # uint48
  publicDrop_endTime: BigInt! # uint48
  publicDrop_maxTotalMintableByWallet: Int! # uint16
  publicDrop_feeBps: Int! # uint16
  publicDrop_restrictFeeRecipients: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShibaDropMint @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  minter: Bytes! # address
  feeRecipient: Bytes! # address
  payer: Bytes! # address
  quantityMinted: BigInt! # uint256
  unitMintPrice: BigInt! # uint256
  feeBps: BigInt! # uint256
  dropStageIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SignedMintValidationParamsUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  signer: Bytes! # address
  signedMintValidationParams_minMintPrice: BigInt! # uint80
  signedMintValidationParams_maxMaxTotalMintableByWallet: Int! # uint24
  signedMintValidationParams_minStartTime: BigInt! # uint40
  signedMintValidationParams_maxEndTime: BigInt! # uint40
  signedMintValidationParams_maxMaxTokenSupplyForStage: BigInt! # uint40
  signedMintValidationParams_minFeeBps: Int! # uint16
  signedMintValidationParams_maxFeeBps: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenGatedDropStageUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  allowedNftToken: Bytes! # address
  dropStage_mintPrice: BigInt! # uint80
  dropStage_maxTotalMintableByWallet: Int! # uint16
  dropStage_startTime: BigInt! # uint48
  dropStage_endTime: BigInt! # uint48
  dropStage_dropStageIndex: Int! # uint8
  dropStage_maxTokenSupplyForStage: BigInt! # uint32
  dropStage_feeBps: Int! # uint16
  dropStage_restrictFeeRecipients: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type NewInstance @entity(immutable: true) {
  id: Bytes!
  instance: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AllowedShibaDropUpdated @entity(immutable: true) {
  id: Bytes!
  allowedShibaDrop: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConsecutiveTransfer @entity(immutable: true) {
  id: Bytes!
  fromTokenId: BigInt! # uint256
  toTokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractURIUpdated @entity(immutable: true) {
  id: Bytes!
  newContractURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxSupplyUpdated @entity(immutable: true) {
  id: Bytes!
  newMaxSupply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PotentialOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  newPotentialAdministrator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProvenanceHashUpdated @entity(immutable: true) {
  id: Bytes!
  previousHash: Bytes! # bytes32
  newHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoyaltyInfoUpdated @entity(immutable: true) {
  id: Bytes!
  receiver: Bytes! # address
  bps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShibaDropTokenDeployed @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferValidatorUpdated @entity(immutable: true) {
  id: Bytes!
  oldValidator: Bytes! # address
  newValidator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
