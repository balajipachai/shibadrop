// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowedShibaDropUpdated extends ethereum.Event {
  get params(): AllowedShibaDropUpdated__Params {
    return new AllowedShibaDropUpdated__Params(this);
  }
}

export class AllowedShibaDropUpdated__Params {
  _event: AllowedShibaDropUpdated;

  constructor(event: AllowedShibaDropUpdated) {
    this._event = event;
  }

  get allowedShibaDrop(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ConsecutiveTransfer extends ethereum.Event {
  get params(): ConsecutiveTransfer__Params {
    return new ConsecutiveTransfer__Params(this);
  }
}

export class ConsecutiveTransfer__Params {
  _event: ConsecutiveTransfer;

  constructor(event: ConsecutiveTransfer) {
    this._event = event;
  }

  get fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get newContractURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MaxSupplyUpdated extends ethereum.Event {
  get params(): MaxSupplyUpdated__Params {
    return new MaxSupplyUpdated__Params(this);
  }
}

export class MaxSupplyUpdated__Params {
  _event: MaxSupplyUpdated;

  constructor(event: MaxSupplyUpdated) {
    this._event = event;
  }

  get newMaxSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PotentialOwnerUpdated extends ethereum.Event {
  get params(): PotentialOwnerUpdated__Params {
    return new PotentialOwnerUpdated__Params(this);
  }
}

export class PotentialOwnerUpdated__Params {
  _event: PotentialOwnerUpdated;

  constructor(event: PotentialOwnerUpdated) {
    this._event = event;
  }

  get newPotentialAdministrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProvenanceHashUpdated extends ethereum.Event {
  get params(): ProvenanceHashUpdated__Params {
    return new ProvenanceHashUpdated__Params(this);
  }
}

export class ProvenanceHashUpdated__Params {
  _event: ProvenanceHashUpdated;

  constructor(event: ProvenanceHashUpdated) {
    this._event = event;
  }

  get previousHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class RoyaltyInfoUpdated extends ethereum.Event {
  get params(): RoyaltyInfoUpdated__Params {
    return new RoyaltyInfoUpdated__Params(this);
  }
}

export class RoyaltyInfoUpdated__Params {
  _event: RoyaltyInfoUpdated;

  constructor(event: RoyaltyInfoUpdated) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ShibaDropTokenDeployed extends ethereum.Event {
  get params(): ShibaDropTokenDeployed__Params {
    return new ShibaDropTokenDeployed__Params(this);
  }
}

export class ShibaDropTokenDeployed__Params {
  _event: ShibaDropTokenDeployed;

  constructor(event: ShibaDropTokenDeployed) {
    this._event = event;
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferValidatorUpdated extends ethereum.Event {
  get params(): TransferValidatorUpdated__Params {
    return new TransferValidatorUpdated__Params(this);
  }
}

export class TransferValidatorUpdated__Params {
  _event: TransferValidatorUpdated;

  constructor(event: TransferValidatorUpdated) {
    this._event = event;
  }

  get oldValidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newValidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ERC721ShibaDropCloneable__getMintStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMinterNumMinted(): BigInt {
    return this.value0;
  }

  getCurrentTotalSupply(): BigInt {
    return this.value1;
  }

  getMaxSupply(): BigInt {
    return this.value2;
  }
}

export class ERC721ShibaDropCloneable__getTransferValidationFunctionResult {
  value0: Bytes;
  value1: boolean;

  constructor(value0: Bytes, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getFunctionSignature(): Bytes {
    return this.value0;
  }

  getIsViewFunction(): boolean {
    return this.value1;
  }
}

export class ERC721ShibaDropCloneable__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class ERC721ShibaDropCloneable extends ethereum.SmartContract {
  static bind(address: Address): ERC721ShibaDropCloneable {
    return new ERC721ShibaDropCloneable("ERC721ShibaDropCloneable", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMintStats(minter: Address): ERC721ShibaDropCloneable__getMintStatsResult {
    let result = super.call(
      "getMintStats",
      "getMintStats(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(minter)]
    );

    return new ERC721ShibaDropCloneable__getMintStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMintStats(
    minter: Address
  ): ethereum.CallResult<ERC721ShibaDropCloneable__getMintStatsResult> {
    let result = super.tryCall(
      "getMintStats",
      "getMintStats(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721ShibaDropCloneable__getMintStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTransferValidationFunction(): ERC721ShibaDropCloneable__getTransferValidationFunctionResult {
    let result = super.call(
      "getTransferValidationFunction",
      "getTransferValidationFunction():(bytes4,bool)",
      []
    );

    return new ERC721ShibaDropCloneable__getTransferValidationFunctionResult(
      result[0].toBytes(),
      result[1].toBoolean()
    );
  }

  try_getTransferValidationFunction(): ethereum.CallResult<ERC721ShibaDropCloneable__getTransferValidationFunctionResult> {
    let result = super.tryCall(
      "getTransferValidationFunction",
      "getTransferValidationFunction():(bytes4,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721ShibaDropCloneable__getTransferValidationFunctionResult(
        value[0].toBytes(),
        value[1].toBoolean()
      )
    );
  }

  getTransferValidator(): Address {
    let result = super.call(
      "getTransferValidator",
      "getTransferValidator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTransferValidator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTransferValidator",
      "getTransferValidator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  provenanceHash(): Bytes {
    let result = super.call("provenanceHash", "provenanceHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_provenanceHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "provenanceHash",
      "provenanceHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  royaltyAddress(): Address {
    let result = super.call("royaltyAddress", "royaltyAddress():(address)", []);

    return result[0].toAddress();
  }

  try_royaltyAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyAddress",
      "royaltyAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyBasisPoints(): BigInt {
    let result = super.call(
      "royaltyBasisPoints",
      "royaltyBasisPoints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_royaltyBasisPoints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltyBasisPoints",
      "royaltyBasisPoints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(
    param0: BigInt,
    _salePrice: BigInt
  ): ERC721ShibaDropCloneable__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(_salePrice),
      ]
    );

    return new ERC721ShibaDropCloneable__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<ERC721ShibaDropCloneable__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(_salePrice),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721ShibaDropCloneable__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall extends ethereum.Call {
  get inputs(): CancelOwnershipTransferCall__Inputs {
    return new CancelOwnershipTransferCall__Inputs(this);
  }

  get outputs(): CancelOwnershipTransferCall__Outputs {
    return new CancelOwnershipTransferCall__Outputs(this);
  }
}

export class CancelOwnershipTransferCall__Inputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall__Outputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class EmitBatchMetadataUpdateCall extends ethereum.Call {
  get inputs(): EmitBatchMetadataUpdateCall__Inputs {
    return new EmitBatchMetadataUpdateCall__Inputs(this);
  }

  get outputs(): EmitBatchMetadataUpdateCall__Outputs {
    return new EmitBatchMetadataUpdateCall__Outputs(this);
  }
}

export class EmitBatchMetadataUpdateCall__Inputs {
  _call: EmitBatchMetadataUpdateCall;

  constructor(call: EmitBatchMetadataUpdateCall) {
    this._call = call;
  }

  get fromTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitBatchMetadataUpdateCall__Outputs {
  _call: EmitBatchMetadataUpdateCall;

  constructor(call: EmitBatchMetadataUpdateCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get __symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get allowedShibaDrop(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get initialOwner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintShibaDropCall extends ethereum.Call {
  get inputs(): MintShibaDropCall__Inputs {
    return new MintShibaDropCall__Inputs(this);
  }

  get outputs(): MintShibaDropCall__Outputs {
    return new MintShibaDropCall__Outputs(this);
  }
}

export class MintShibaDropCall__Inputs {
  _call: MintShibaDropCall;

  constructor(call: MintShibaDropCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintShibaDropCall__Outputs {
  _call: MintShibaDropCall;

  constructor(call: MintShibaDropCall) {
    this._call = call;
  }
}

export class MultiConfigureCall extends ethereum.Call {
  get inputs(): MultiConfigureCall__Inputs {
    return new MultiConfigureCall__Inputs(this);
  }

  get outputs(): MultiConfigureCall__Outputs {
    return new MultiConfigureCall__Outputs(this);
  }
}

export class MultiConfigureCall__Inputs {
  _call: MultiConfigureCall;

  constructor(call: MultiConfigureCall) {
    this._call = call;
  }

  get config(): MultiConfigureCallConfigStruct {
    return changetype<MultiConfigureCallConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MultiConfigureCall__Outputs {
  _call: MultiConfigureCall;

  constructor(call: MultiConfigureCall) {
    this._call = call;
  }
}

export class MultiConfigureCallConfigStruct extends ethereum.Tuple {
  get maxSupply(): BigInt {
    return this[0].toBigInt();
  }

  get baseURI(): string {
    return this[1].toString();
  }

  get contractURI(): string {
    return this[2].toString();
  }

  get shibaDropImpl(): Address {
    return this[3].toAddress();
  }

  get publicDrop(): MultiConfigureCallConfigPublicDropStruct {
    return changetype<MultiConfigureCallConfigPublicDropStruct>(
      this[4].toTuple()
    );
  }

  get dropURI(): string {
    return this[5].toString();
  }

  get allowListData(): MultiConfigureCallConfigAllowListDataStruct {
    return changetype<MultiConfigureCallConfigAllowListDataStruct>(
      this[6].toTuple()
    );
  }

  get creatorPayoutAddress(): Address {
    return this[7].toAddress();
  }

  get provenanceHash(): Bytes {
    return this[8].toBytes();
  }

  get allowedFeeRecipients(): Array<Address> {
    return this[9].toAddressArray();
  }

  get disallowedFeeRecipients(): Array<Address> {
    return this[10].toAddressArray();
  }

  get allowedPayers(): Array<Address> {
    return this[11].toAddressArray();
  }

  get disallowedPayers(): Array<Address> {
    return this[12].toAddressArray();
  }

  get tokenGatedAllowedNftTokens(): Array<Address> {
    return this[13].toAddressArray();
  }

  get tokenGatedDropStages(): Array<MultiConfigureCallConfigTokenGatedDropStagesStruct> {
    return this[14].toTupleArray<MultiConfigureCallConfigTokenGatedDropStagesStruct>();
  }

  get disallowedTokenGatedAllowedNftTokens(): Array<Address> {
    return this[15].toAddressArray();
  }

  get signers(): Array<Address> {
    return this[16].toAddressArray();
  }

  get signedMintValidationParams(): Array<MultiConfigureCallConfigSignedMintValidationParamsStruct> {
    return this[17].toTupleArray<MultiConfigureCallConfigSignedMintValidationParamsStruct>();
  }

  get disallowedSigners(): Array<Address> {
    return this[18].toAddressArray();
  }
}

export class MultiConfigureCallConfigPublicDropStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[3].toI32();
  }

  get feeBps(): i32 {
    return this[4].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[5].toBoolean();
  }
}

export class MultiConfigureCallConfigAllowListDataStruct extends ethereum.Tuple {
  get merkleRoot(): Bytes {
    return this[0].toBytes();
  }

  get publicKeyURIs(): Array<string> {
    return this[1].toStringArray();
  }

  get allowListURI(): string {
    return this[2].toString();
  }
}

export class MultiConfigureCallConfigTokenGatedDropStagesStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): i32 {
    return this[4].toI32();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): i32 {
    return this[6].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}

export class MultiConfigureCallConfigSignedMintValidationParamsStruct extends ethereum.Tuple {
  get minMintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxMaxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get minStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get maxMaxTokenSupplyForStage(): BigInt {
    return this[4].toBigInt();
  }

  get minFeeBps(): i32 {
    return this[5].toI32();
  }

  get maxFeeBps(): i32 {
    return this[6].toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get newContractURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetMaxSupplyCall extends ethereum.Call {
  get inputs(): SetMaxSupplyCall__Inputs {
    return new SetMaxSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxSupplyCall__Outputs {
    return new SetMaxSupplyCall__Outputs(this);
  }
}

export class SetMaxSupplyCall__Inputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }

  get newMaxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxSupplyCall__Outputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }
}

export class SetProvenanceHashCall extends ethereum.Call {
  get inputs(): SetProvenanceHashCall__Inputs {
    return new SetProvenanceHashCall__Inputs(this);
  }

  get outputs(): SetProvenanceHashCall__Outputs {
    return new SetProvenanceHashCall__Outputs(this);
  }
}

export class SetProvenanceHashCall__Inputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }

  get newProvenanceHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetProvenanceHashCall__Outputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoCall__Inputs {
    return new SetRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoCall__Outputs {
    return new SetRoyaltyInfoCall__Outputs(this);
  }
}

export class SetRoyaltyInfoCall__Inputs {
  _call: SetRoyaltyInfoCall;

  constructor(call: SetRoyaltyInfoCall) {
    this._call = call;
  }

  get newInfo(): SetRoyaltyInfoCallNewInfoStruct {
    return changetype<SetRoyaltyInfoCallNewInfoStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetRoyaltyInfoCall__Outputs {
  _call: SetRoyaltyInfoCall;

  constructor(call: SetRoyaltyInfoCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoCallNewInfoStruct extends ethereum.Tuple {
  get royaltyAddress(): Address {
    return this[0].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetTransferValidatorCall extends ethereum.Call {
  get inputs(): SetTransferValidatorCall__Inputs {
    return new SetTransferValidatorCall__Inputs(this);
  }

  get outputs(): SetTransferValidatorCall__Outputs {
    return new SetTransferValidatorCall__Outputs(this);
  }
}

export class SetTransferValidatorCall__Inputs {
  _call: SetTransferValidatorCall;

  constructor(call: SetTransferValidatorCall) {
    this._call = call;
  }

  get newValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTransferValidatorCall__Outputs {
  _call: SetTransferValidatorCall;

  constructor(call: SetTransferValidatorCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newPotentialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAllowListCall extends ethereum.Call {
  get inputs(): UpdateAllowListCall__Inputs {
    return new UpdateAllowListCall__Inputs(this);
  }

  get outputs(): UpdateAllowListCall__Outputs {
    return new UpdateAllowListCall__Outputs(this);
  }
}

export class UpdateAllowListCall__Inputs {
  _call: UpdateAllowListCall;

  constructor(call: UpdateAllowListCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowListData(): UpdateAllowListCallAllowListDataStruct {
    return changetype<UpdateAllowListCallAllowListDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateAllowListCall__Outputs {
  _call: UpdateAllowListCall;

  constructor(call: UpdateAllowListCall) {
    this._call = call;
  }
}

export class UpdateAllowListCallAllowListDataStruct extends ethereum.Tuple {
  get merkleRoot(): Bytes {
    return this[0].toBytes();
  }

  get publicKeyURIs(): Array<string> {
    return this[1].toStringArray();
  }

  get allowListURI(): string {
    return this[2].toString();
  }
}

export class UpdateAllowedFeeRecipientCall extends ethereum.Call {
  get inputs(): UpdateAllowedFeeRecipientCall__Inputs {
    return new UpdateAllowedFeeRecipientCall__Inputs(this);
  }

  get outputs(): UpdateAllowedFeeRecipientCall__Outputs {
    return new UpdateAllowedFeeRecipientCall__Outputs(this);
  }
}

export class UpdateAllowedFeeRecipientCall__Inputs {
  _call: UpdateAllowedFeeRecipientCall;

  constructor(call: UpdateAllowedFeeRecipientCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateAllowedFeeRecipientCall__Outputs {
  _call: UpdateAllowedFeeRecipientCall;

  constructor(call: UpdateAllowedFeeRecipientCall) {
    this._call = call;
  }
}

export class UpdateAllowedShibaDropCall extends ethereum.Call {
  get inputs(): UpdateAllowedShibaDropCall__Inputs {
    return new UpdateAllowedShibaDropCall__Inputs(this);
  }

  get outputs(): UpdateAllowedShibaDropCall__Outputs {
    return new UpdateAllowedShibaDropCall__Outputs(this);
  }
}

export class UpdateAllowedShibaDropCall__Inputs {
  _call: UpdateAllowedShibaDropCall;

  constructor(call: UpdateAllowedShibaDropCall) {
    this._call = call;
  }

  get allowedShibaDrop(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdateAllowedShibaDropCall__Outputs {
  _call: UpdateAllowedShibaDropCall;

  constructor(call: UpdateAllowedShibaDropCall) {
    this._call = call;
  }
}

export class UpdateCreatorPayoutAddressCall extends ethereum.Call {
  get inputs(): UpdateCreatorPayoutAddressCall__Inputs {
    return new UpdateCreatorPayoutAddressCall__Inputs(this);
  }

  get outputs(): UpdateCreatorPayoutAddressCall__Outputs {
    return new UpdateCreatorPayoutAddressCall__Outputs(this);
  }
}

export class UpdateCreatorPayoutAddressCall__Inputs {
  _call: UpdateCreatorPayoutAddressCall;

  constructor(call: UpdateCreatorPayoutAddressCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payoutAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateCreatorPayoutAddressCall__Outputs {
  _call: UpdateCreatorPayoutAddressCall;

  constructor(call: UpdateCreatorPayoutAddressCall) {
    this._call = call;
  }
}

export class UpdateDropURICall extends ethereum.Call {
  get inputs(): UpdateDropURICall__Inputs {
    return new UpdateDropURICall__Inputs(this);
  }

  get outputs(): UpdateDropURICall__Outputs {
    return new UpdateDropURICall__Outputs(this);
  }
}

export class UpdateDropURICall__Inputs {
  _call: UpdateDropURICall;

  constructor(call: UpdateDropURICall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dropURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateDropURICall__Outputs {
  _call: UpdateDropURICall;

  constructor(call: UpdateDropURICall) {
    this._call = call;
  }
}

export class UpdatePayerCall extends ethereum.Call {
  get inputs(): UpdatePayerCall__Inputs {
    return new UpdatePayerCall__Inputs(this);
  }

  get outputs(): UpdatePayerCall__Outputs {
    return new UpdatePayerCall__Outputs(this);
  }
}

export class UpdatePayerCall__Inputs {
  _call: UpdatePayerCall;

  constructor(call: UpdatePayerCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdatePayerCall__Outputs {
  _call: UpdatePayerCall;

  constructor(call: UpdatePayerCall) {
    this._call = call;
  }
}

export class UpdatePublicDropCall extends ethereum.Call {
  get inputs(): UpdatePublicDropCall__Inputs {
    return new UpdatePublicDropCall__Inputs(this);
  }

  get outputs(): UpdatePublicDropCall__Outputs {
    return new UpdatePublicDropCall__Outputs(this);
  }
}

export class UpdatePublicDropCall__Inputs {
  _call: UpdatePublicDropCall;

  constructor(call: UpdatePublicDropCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get publicDrop(): UpdatePublicDropCallPublicDropStruct {
    return changetype<UpdatePublicDropCallPublicDropStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdatePublicDropCall__Outputs {
  _call: UpdatePublicDropCall;

  constructor(call: UpdatePublicDropCall) {
    this._call = call;
  }
}

export class UpdatePublicDropCallPublicDropStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[3].toI32();
  }

  get feeBps(): i32 {
    return this[4].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[5].toBoolean();
  }
}

export class UpdateSignedMintValidationParamsCall extends ethereum.Call {
  get inputs(): UpdateSignedMintValidationParamsCall__Inputs {
    return new UpdateSignedMintValidationParamsCall__Inputs(this);
  }

  get outputs(): UpdateSignedMintValidationParamsCall__Outputs {
    return new UpdateSignedMintValidationParamsCall__Outputs(this);
  }
}

export class UpdateSignedMintValidationParamsCall__Inputs {
  _call: UpdateSignedMintValidationParamsCall;

  constructor(call: UpdateSignedMintValidationParamsCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get signedMintValidationParams(): UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct {
    return changetype<UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class UpdateSignedMintValidationParamsCall__Outputs {
  _call: UpdateSignedMintValidationParamsCall;

  constructor(call: UpdateSignedMintValidationParamsCall) {
    this._call = call;
  }
}

export class UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct extends ethereum.Tuple {
  get minMintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxMaxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get minStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get maxMaxTokenSupplyForStage(): BigInt {
    return this[4].toBigInt();
  }

  get minFeeBps(): i32 {
    return this[5].toI32();
  }

  get maxFeeBps(): i32 {
    return this[6].toI32();
  }
}

export class UpdateTokenGatedDropCall extends ethereum.Call {
  get inputs(): UpdateTokenGatedDropCall__Inputs {
    return new UpdateTokenGatedDropCall__Inputs(this);
  }

  get outputs(): UpdateTokenGatedDropCall__Outputs {
    return new UpdateTokenGatedDropCall__Outputs(this);
  }
}

export class UpdateTokenGatedDropCall__Inputs {
  _call: UpdateTokenGatedDropCall;

  constructor(call: UpdateTokenGatedDropCall) {
    this._call = call;
  }

  get shibaDropImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowedNftToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dropStage(): UpdateTokenGatedDropCallDropStageStruct {
    return changetype<UpdateTokenGatedDropCallDropStageStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class UpdateTokenGatedDropCall__Outputs {
  _call: UpdateTokenGatedDropCall;

  constructor(call: UpdateTokenGatedDropCall) {
    this._call = call;
  }
}

export class UpdateTokenGatedDropCallDropStageStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): i32 {
    return this[4].toI32();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): i32 {
    return this[6].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}
