// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowListUpdated extends ethereum.Event {
  get params(): AllowListUpdated__Params {
    return new AllowListUpdated__Params(this);
  }
}

export class AllowListUpdated__Params {
  _event: AllowListUpdated;

  constructor(event: AllowListUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousMerkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newMerkleRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get publicKeyURI(): Array<string> {
    return this._event.parameters[3].value.toStringArray();
  }

  get allowListURI(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class AllowedFeeRecipientUpdated extends ethereum.Event {
  get params(): AllowedFeeRecipientUpdated__Params {
    return new AllowedFeeRecipientUpdated__Params(this);
  }
}

export class AllowedFeeRecipientUpdated__Params {
  _event: AllowedFeeRecipientUpdated;

  constructor(event: AllowedFeeRecipientUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreatorPayoutAddressUpdated extends ethereum.Event {
  get params(): CreatorPayoutAddressUpdated__Params {
    return new CreatorPayoutAddressUpdated__Params(this);
  }
}

export class CreatorPayoutAddressUpdated__Params {
  _event: CreatorPayoutAddressUpdated;

  constructor(event: CreatorPayoutAddressUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPayoutAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DropURIUpdated extends ethereum.Event {
  get params(): DropURIUpdated__Params {
    return new DropURIUpdated__Params(this);
  }
}

export class DropURIUpdated__Params {
  _event: DropURIUpdated;

  constructor(event: DropURIUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDropURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class PayerUpdated extends ethereum.Event {
  get params(): PayerUpdated__Params {
    return new PayerUpdated__Params(this);
  }
}

export class PayerUpdated__Params {
  _event: PayerUpdated;

  constructor(event: PayerUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PublicDropUpdated extends ethereum.Event {
  get params(): PublicDropUpdated__Params {
    return new PublicDropUpdated__Params(this);
  }
}

export class PublicDropUpdated__Params {
  _event: PublicDropUpdated;

  constructor(event: PublicDropUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get publicDrop(): PublicDropUpdatedPublicDropStruct {
    return changetype<PublicDropUpdatedPublicDropStruct>(
      this._event.parameters[1].value.toTuple(),
    );
  }
}

export class PublicDropUpdatedPublicDropStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[3].toI32();
  }

  get feeBps(): i32 {
    return this[4].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[5].toBoolean();
  }
}

export class ShibaDropMint extends ethereum.Event {
  get params(): ShibaDropMint__Params {
    return new ShibaDropMint__Params(this);
  }
}

export class ShibaDropMint__Params {
  _event: ShibaDropMint;

  constructor(event: ShibaDropMint) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get quantityMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get unitMintPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeBps(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get dropStageIndex(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class SignedMintValidationParamsUpdated extends ethereum.Event {
  get params(): SignedMintValidationParamsUpdated__Params {
    return new SignedMintValidationParamsUpdated__Params(this);
  }
}

export class SignedMintValidationParamsUpdated__Params {
  _event: SignedMintValidationParamsUpdated;

  constructor(event: SignedMintValidationParamsUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get signedMintValidationParams(): SignedMintValidationParamsUpdatedSignedMintValidationParamsStruct {
    return changetype<SignedMintValidationParamsUpdatedSignedMintValidationParamsStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }
}

export class SignedMintValidationParamsUpdatedSignedMintValidationParamsStruct extends ethereum.Tuple {
  get minMintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxMaxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get minStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get maxMaxTokenSupplyForStage(): BigInt {
    return this[4].toBigInt();
  }

  get minFeeBps(): i32 {
    return this[5].toI32();
  }

  get maxFeeBps(): i32 {
    return this[6].toI32();
  }
}

export class TokenGatedDropStageUpdated extends ethereum.Event {
  get params(): TokenGatedDropStageUpdated__Params {
    return new TokenGatedDropStageUpdated__Params(this);
  }
}

export class TokenGatedDropStageUpdated__Params {
  _event: TokenGatedDropStageUpdated;

  constructor(event: TokenGatedDropStageUpdated) {
    this._event = event;
  }

  get nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowedNftToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dropStage(): TokenGatedDropStageUpdatedDropStageStruct {
    return changetype<TokenGatedDropStageUpdatedDropStageStruct>(
      this._event.parameters[2].value.toTuple(),
    );
  }
}

export class TokenGatedDropStageUpdatedDropStageStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): i32 {
    return this[4].toI32();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): i32 {
    return this[6].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}

export class ShibaDrop__getPublicDropResultValue0Struct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[3].toI32();
  }

  get feeBps(): i32 {
    return this[4].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[5].toBoolean();
  }
}

export class ShibaDrop__getSignedMintValidationParamsResultValue0Struct extends ethereum.Tuple {
  get minMintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxMaxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get minStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get maxMaxTokenSupplyForStage(): BigInt {
    return this[4].toBigInt();
  }

  get minFeeBps(): i32 {
    return this[5].toI32();
  }

  get maxFeeBps(): i32 {
    return this[6].toI32();
  }
}

export class ShibaDrop__getTokenGatedDropResultValue0Struct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): i32 {
    return this[4].toI32();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): i32 {
    return this[6].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}

export class ShibaDrop extends ethereum.SmartContract {
  static bind(address: Address): ShibaDrop {
    return new ShibaDrop("ShibaDrop", address);
  }

  getAllowListMerkleRoot(nftContract: Address): Bytes {
    let result = super.call(
      "getAllowListMerkleRoot",
      "getAllowListMerkleRoot(address):(bytes32)",
      [ethereum.Value.fromAddress(nftContract)],
    );

    return result[0].toBytes();
  }

  try_getAllowListMerkleRoot(nftContract: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAllowListMerkleRoot",
      "getAllowListMerkleRoot(address):(bytes32)",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAllowedFeeRecipients(nftContract: Address): Array<Address> {
    let result = super.call(
      "getAllowedFeeRecipients",
      "getAllowedFeeRecipients(address):(address[])",
      [ethereum.Value.fromAddress(nftContract)],
    );

    return result[0].toAddressArray();
  }

  try_getAllowedFeeRecipients(
    nftContract: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllowedFeeRecipients",
      "getAllowedFeeRecipients(address):(address[])",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllowedNftTokenIdIsRedeemed(
    nftContract: Address,
    allowedNftToken: Address,
    allowedNftTokenId: BigInt,
  ): boolean {
    let result = super.call(
      "getAllowedNftTokenIdIsRedeemed",
      "getAllowedNftTokenIdIsRedeemed(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(allowedNftToken),
        ethereum.Value.fromUnsignedBigInt(allowedNftTokenId),
      ],
    );

    return result[0].toBoolean();
  }

  try_getAllowedNftTokenIdIsRedeemed(
    nftContract: Address,
    allowedNftToken: Address,
    allowedNftTokenId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getAllowedNftTokenIdIsRedeemed",
      "getAllowedNftTokenIdIsRedeemed(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(allowedNftToken),
        ethereum.Value.fromUnsignedBigInt(allowedNftTokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCreatorPayoutAddress(nftContract: Address): Address {
    let result = super.call(
      "getCreatorPayoutAddress",
      "getCreatorPayoutAddress(address):(address)",
      [ethereum.Value.fromAddress(nftContract)],
    );

    return result[0].toAddress();
  }

  try_getCreatorPayoutAddress(
    nftContract: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCreatorPayoutAddress",
      "getCreatorPayoutAddress(address):(address)",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeRecipientIsAllowed(
    nftContract: Address,
    feeRecipient: Address,
  ): boolean {
    let result = super.call(
      "getFeeRecipientIsAllowed",
      "getFeeRecipientIsAllowed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(feeRecipient),
      ],
    );

    return result[0].toBoolean();
  }

  try_getFeeRecipientIsAllowed(
    nftContract: Address,
    feeRecipient: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getFeeRecipientIsAllowed",
      "getFeeRecipientIsAllowed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(feeRecipient),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPayerIsAllowed(nftContract: Address, payer: Address): boolean {
    let result = super.call(
      "getPayerIsAllowed",
      "getPayerIsAllowed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(payer),
      ],
    );

    return result[0].toBoolean();
  }

  try_getPayerIsAllowed(
    nftContract: Address,
    payer: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getPayerIsAllowed",
      "getPayerIsAllowed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(payer),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPayers(nftContract: Address): Array<Address> {
    let result = super.call("getPayers", "getPayers(address):(address[])", [
      ethereum.Value.fromAddress(nftContract),
    ]);

    return result[0].toAddressArray();
  }

  try_getPayers(nftContract: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getPayers", "getPayers(address):(address[])", [
      ethereum.Value.fromAddress(nftContract),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPublicDrop(
    nftContract: Address,
  ): ShibaDrop__getPublicDropResultValue0Struct {
    let result = super.call(
      "getPublicDrop",
      "getPublicDrop(address):((uint80,uint48,uint48,uint16,uint16,bool))",
      [ethereum.Value.fromAddress(nftContract)],
    );

    return changetype<ShibaDrop__getPublicDropResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPublicDrop(
    nftContract: Address,
  ): ethereum.CallResult<ShibaDrop__getPublicDropResultValue0Struct> {
    let result = super.tryCall(
      "getPublicDrop",
      "getPublicDrop(address):((uint80,uint48,uint48,uint16,uint16,bool))",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ShibaDrop__getPublicDropResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getSignedMintValidationParams(
    nftContract: Address,
    signer: Address,
  ): ShibaDrop__getSignedMintValidationParamsResultValue0Struct {
    let result = super.call(
      "getSignedMintValidationParams",
      "getSignedMintValidationParams(address,address):((uint80,uint24,uint40,uint40,uint40,uint16,uint16))",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(signer),
      ],
    );

    return changetype<ShibaDrop__getSignedMintValidationParamsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getSignedMintValidationParams(
    nftContract: Address,
    signer: Address,
  ): ethereum.CallResult<ShibaDrop__getSignedMintValidationParamsResultValue0Struct> {
    let result = super.tryCall(
      "getSignedMintValidationParams",
      "getSignedMintValidationParams(address,address):((uint80,uint24,uint40,uint40,uint40,uint16,uint16))",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(signer),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ShibaDrop__getSignedMintValidationParamsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getSigners(nftContract: Address): Array<Address> {
    let result = super.call("getSigners", "getSigners(address):(address[])", [
      ethereum.Value.fromAddress(nftContract),
    ]);

    return result[0].toAddressArray();
  }

  try_getSigners(nftContract: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSigners",
      "getSigners(address):(address[])",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokenGatedAllowedTokens(nftContract: Address): Array<Address> {
    let result = super.call(
      "getTokenGatedAllowedTokens",
      "getTokenGatedAllowedTokens(address):(address[])",
      [ethereum.Value.fromAddress(nftContract)],
    );

    return result[0].toAddressArray();
  }

  try_getTokenGatedAllowedTokens(
    nftContract: Address,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenGatedAllowedTokens",
      "getTokenGatedAllowedTokens(address):(address[])",
      [ethereum.Value.fromAddress(nftContract)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokenGatedDrop(
    nftContract: Address,
    allowedNftToken: Address,
  ): ShibaDrop__getTokenGatedDropResultValue0Struct {
    let result = super.call(
      "getTokenGatedDrop",
      "getTokenGatedDrop(address,address):((uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool))",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(allowedNftToken),
      ],
    );

    return changetype<ShibaDrop__getTokenGatedDropResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTokenGatedDrop(
    nftContract: Address,
    allowedNftToken: Address,
  ): ethereum.CallResult<ShibaDrop__getTokenGatedDropResultValue0Struct> {
    let result = super.tryCall(
      "getTokenGatedDrop",
      "getTokenGatedDrop(address,address):((uint80,uint16,uint48,uint48,uint8,uint32,uint16,bool))",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromAddress(allowedNftToken),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ShibaDrop__getTokenGatedDropResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintAllowListCall extends ethereum.Call {
  get inputs(): MintAllowListCall__Inputs {
    return new MintAllowListCall__Inputs(this);
  }

  get outputs(): MintAllowListCall__Outputs {
    return new MintAllowListCall__Outputs(this);
  }
}

export class MintAllowListCall__Inputs {
  _call: MintAllowListCall;

  constructor(call: MintAllowListCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minterIfNotPayer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get mintParams(): MintAllowListCallMintParamsStruct {
    return changetype<MintAllowListCallMintParamsStruct>(
      this._call.inputValues[4].value.toTuple(),
    );
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class MintAllowListCall__Outputs {
  _call: MintAllowListCall;

  constructor(call: MintAllowListCall) {
    this._call = call;
  }
}

export class MintAllowListCallMintParamsStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): BigInt {
    return this[1].toBigInt();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): BigInt {
    return this[4].toBigInt();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): BigInt {
    return this[6].toBigInt();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}

export class MintAllowedTokenHolderCall extends ethereum.Call {
  get inputs(): MintAllowedTokenHolderCall__Inputs {
    return new MintAllowedTokenHolderCall__Inputs(this);
  }

  get outputs(): MintAllowedTokenHolderCall__Outputs {
    return new MintAllowedTokenHolderCall__Outputs(this);
  }
}

export class MintAllowedTokenHolderCall__Inputs {
  _call: MintAllowedTokenHolderCall;

  constructor(call: MintAllowedTokenHolderCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minterIfNotPayer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get mintParams(): MintAllowedTokenHolderCallMintParamsStruct {
    return changetype<MintAllowedTokenHolderCallMintParamsStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }
}

export class MintAllowedTokenHolderCall__Outputs {
  _call: MintAllowedTokenHolderCall;

  constructor(call: MintAllowedTokenHolderCall) {
    this._call = call;
  }
}

export class MintAllowedTokenHolderCallMintParamsStruct extends ethereum.Tuple {
  get allowedNftToken(): Address {
    return this[0].toAddress();
  }

  get allowedNftTokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class MintPublicCall extends ethereum.Call {
  get inputs(): MintPublicCall__Inputs {
    return new MintPublicCall__Inputs(this);
  }

  get outputs(): MintPublicCall__Outputs {
    return new MintPublicCall__Outputs(this);
  }
}

export class MintPublicCall__Inputs {
  _call: MintPublicCall;

  constructor(call: MintPublicCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minterIfNotPayer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintPublicCall__Outputs {
  _call: MintPublicCall;

  constructor(call: MintPublicCall) {
    this._call = call;
  }
}

export class MintSignedCall extends ethereum.Call {
  get inputs(): MintSignedCall__Inputs {
    return new MintSignedCall__Inputs(this);
  }

  get outputs(): MintSignedCall__Outputs {
    return new MintSignedCall__Outputs(this);
  }
}

export class MintSignedCall__Inputs {
  _call: MintSignedCall;

  constructor(call: MintSignedCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get minterIfNotPayer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get mintParams(): MintSignedCallMintParamsStruct {
    return changetype<MintSignedCallMintParamsStruct>(
      this._call.inputValues[4].value.toTuple(),
    );
  }

  get salt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class MintSignedCall__Outputs {
  _call: MintSignedCall;

  constructor(call: MintSignedCall) {
    this._call = call;
  }
}

export class MintSignedCallMintParamsStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): BigInt {
    return this[1].toBigInt();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): BigInt {
    return this[4].toBigInt();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): BigInt {
    return this[6].toBigInt();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}

export class UpdateAllowListCall extends ethereum.Call {
  get inputs(): UpdateAllowListCall__Inputs {
    return new UpdateAllowListCall__Inputs(this);
  }

  get outputs(): UpdateAllowListCall__Outputs {
    return new UpdateAllowListCall__Outputs(this);
  }
}

export class UpdateAllowListCall__Inputs {
  _call: UpdateAllowListCall;

  constructor(call: UpdateAllowListCall) {
    this._call = call;
  }

  get allowListData(): UpdateAllowListCallAllowListDataStruct {
    return changetype<UpdateAllowListCallAllowListDataStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UpdateAllowListCall__Outputs {
  _call: UpdateAllowListCall;

  constructor(call: UpdateAllowListCall) {
    this._call = call;
  }
}

export class UpdateAllowListCallAllowListDataStruct extends ethereum.Tuple {
  get merkleRoot(): Bytes {
    return this[0].toBytes();
  }

  get publicKeyURIs(): Array<string> {
    return this[1].toStringArray();
  }

  get allowListURI(): string {
    return this[2].toString();
  }
}

export class UpdateAllowedFeeRecipientCall extends ethereum.Call {
  get inputs(): UpdateAllowedFeeRecipientCall__Inputs {
    return new UpdateAllowedFeeRecipientCall__Inputs(this);
  }

  get outputs(): UpdateAllowedFeeRecipientCall__Outputs {
    return new UpdateAllowedFeeRecipientCall__Outputs(this);
  }
}

export class UpdateAllowedFeeRecipientCall__Inputs {
  _call: UpdateAllowedFeeRecipientCall;

  constructor(call: UpdateAllowedFeeRecipientCall) {
    this._call = call;
  }

  get feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateAllowedFeeRecipientCall__Outputs {
  _call: UpdateAllowedFeeRecipientCall;

  constructor(call: UpdateAllowedFeeRecipientCall) {
    this._call = call;
  }
}

export class UpdateCreatorPayoutAddressCall extends ethereum.Call {
  get inputs(): UpdateCreatorPayoutAddressCall__Inputs {
    return new UpdateCreatorPayoutAddressCall__Inputs(this);
  }

  get outputs(): UpdateCreatorPayoutAddressCall__Outputs {
    return new UpdateCreatorPayoutAddressCall__Outputs(this);
  }
}

export class UpdateCreatorPayoutAddressCall__Inputs {
  _call: UpdateCreatorPayoutAddressCall;

  constructor(call: UpdateCreatorPayoutAddressCall) {
    this._call = call;
  }

  get payoutAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCreatorPayoutAddressCall__Outputs {
  _call: UpdateCreatorPayoutAddressCall;

  constructor(call: UpdateCreatorPayoutAddressCall) {
    this._call = call;
  }
}

export class UpdateDropURICall extends ethereum.Call {
  get inputs(): UpdateDropURICall__Inputs {
    return new UpdateDropURICall__Inputs(this);
  }

  get outputs(): UpdateDropURICall__Outputs {
    return new UpdateDropURICall__Outputs(this);
  }
}

export class UpdateDropURICall__Inputs {
  _call: UpdateDropURICall;

  constructor(call: UpdateDropURICall) {
    this._call = call;
  }

  get dropURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateDropURICall__Outputs {
  _call: UpdateDropURICall;

  constructor(call: UpdateDropURICall) {
    this._call = call;
  }
}

export class UpdatePayerCall extends ethereum.Call {
  get inputs(): UpdatePayerCall__Inputs {
    return new UpdatePayerCall__Inputs(this);
  }

  get outputs(): UpdatePayerCall__Outputs {
    return new UpdatePayerCall__Outputs(this);
  }
}

export class UpdatePayerCall__Inputs {
  _call: UpdatePayerCall;

  constructor(call: UpdatePayerCall) {
    this._call = call;
  }

  get payer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdatePayerCall__Outputs {
  _call: UpdatePayerCall;

  constructor(call: UpdatePayerCall) {
    this._call = call;
  }
}

export class UpdatePublicDropCall extends ethereum.Call {
  get inputs(): UpdatePublicDropCall__Inputs {
    return new UpdatePublicDropCall__Inputs(this);
  }

  get outputs(): UpdatePublicDropCall__Outputs {
    return new UpdatePublicDropCall__Outputs(this);
  }
}

export class UpdatePublicDropCall__Inputs {
  _call: UpdatePublicDropCall;

  constructor(call: UpdatePublicDropCall) {
    this._call = call;
  }

  get publicDrop(): UpdatePublicDropCallPublicDropStruct {
    return changetype<UpdatePublicDropCallPublicDropStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class UpdatePublicDropCall__Outputs {
  _call: UpdatePublicDropCall;

  constructor(call: UpdatePublicDropCall) {
    this._call = call;
  }
}

export class UpdatePublicDropCallPublicDropStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get startTime(): BigInt {
    return this[1].toBigInt();
  }

  get endTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[3].toI32();
  }

  get feeBps(): i32 {
    return this[4].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[5].toBoolean();
  }
}

export class UpdateSignedMintValidationParamsCall extends ethereum.Call {
  get inputs(): UpdateSignedMintValidationParamsCall__Inputs {
    return new UpdateSignedMintValidationParamsCall__Inputs(this);
  }

  get outputs(): UpdateSignedMintValidationParamsCall__Outputs {
    return new UpdateSignedMintValidationParamsCall__Outputs(this);
  }
}

export class UpdateSignedMintValidationParamsCall__Inputs {
  _call: UpdateSignedMintValidationParamsCall;

  constructor(call: UpdateSignedMintValidationParamsCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signedMintValidationParams(): UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct {
    return changetype<UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class UpdateSignedMintValidationParamsCall__Outputs {
  _call: UpdateSignedMintValidationParamsCall;

  constructor(call: UpdateSignedMintValidationParamsCall) {
    this._call = call;
  }
}

export class UpdateSignedMintValidationParamsCallSignedMintValidationParamsStruct extends ethereum.Tuple {
  get minMintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxMaxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get minStartTime(): BigInt {
    return this[2].toBigInt();
  }

  get maxEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get maxMaxTokenSupplyForStage(): BigInt {
    return this[4].toBigInt();
  }

  get minFeeBps(): i32 {
    return this[5].toI32();
  }

  get maxFeeBps(): i32 {
    return this[6].toI32();
  }
}

export class UpdateTokenGatedDropCall extends ethereum.Call {
  get inputs(): UpdateTokenGatedDropCall__Inputs {
    return new UpdateTokenGatedDropCall__Inputs(this);
  }

  get outputs(): UpdateTokenGatedDropCall__Outputs {
    return new UpdateTokenGatedDropCall__Outputs(this);
  }
}

export class UpdateTokenGatedDropCall__Inputs {
  _call: UpdateTokenGatedDropCall;

  constructor(call: UpdateTokenGatedDropCall) {
    this._call = call;
  }

  get allowedNftToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dropStage(): UpdateTokenGatedDropCallDropStageStruct {
    return changetype<UpdateTokenGatedDropCallDropStageStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class UpdateTokenGatedDropCall__Outputs {
  _call: UpdateTokenGatedDropCall;

  constructor(call: UpdateTokenGatedDropCall) {
    this._call = call;
  }
}

export class UpdateTokenGatedDropCallDropStageStruct extends ethereum.Tuple {
  get mintPrice(): BigInt {
    return this[0].toBigInt();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[1].toI32();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get dropStageIndex(): i32 {
    return this[4].toI32();
  }

  get maxTokenSupplyForStage(): BigInt {
    return this[5].toBigInt();
  }

  get feeBps(): i32 {
    return this[6].toI32();
  }

  get restrictFeeRecipients(): boolean {
    return this[7].toBoolean();
  }
}
