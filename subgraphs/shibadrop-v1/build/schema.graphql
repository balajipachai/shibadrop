type AllowListUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  previousMerkleRoot: Bytes! # bytes32
  newMerkleRoot: Bytes! # bytes32
  publicKeyURI: [String!]! # string[]
  allowListURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AllowedFeeRecipientUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  feeRecipient: Bytes! # address
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreatorPayoutAddressUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  newPayoutAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DropURIUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  newDropURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayerUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  payer: Bytes! # address
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicDropUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  publicDrop_mintPrice: BigInt! # uint80
  publicDrop_startTime: BigInt! # uint48
  publicDrop_endTime: BigInt! # uint48
  publicDrop_maxTotalMintableByWallet: Int! # uint16
  publicDrop_feeBps: Int! # uint16
  publicDrop_restrictFeeRecipients: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ShibaDropMint @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  minter: Bytes! # address
  feeRecipient: Bytes! # address
  payer: Bytes! # address
  quantityMinted: BigInt! # uint256
  unitMintPrice: BigInt! # uint256
  feeBps: BigInt! # uint256
  dropStageIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SignedMintValidationParamsUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  signer: Bytes! # address
  signedMintValidationParams_minMintPrice: BigInt! # uint80
  signedMintValidationParams_maxMaxTotalMintableByWallet: Int! # uint24
  signedMintValidationParams_minStartTime: BigInt! # uint40
  signedMintValidationParams_maxEndTime: BigInt! # uint40
  signedMintValidationParams_maxMaxTokenSupplyForStage: BigInt! # uint40
  signedMintValidationParams_minFeeBps: Int! # uint16
  signedMintValidationParams_maxFeeBps: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenGatedDropStageUpdated @entity(immutable: true) {
  id: Bytes!
  nftContract: Bytes! # address
  allowedNftToken: Bytes! # address
  dropStage_mintPrice: BigInt! # uint80
  dropStage_maxTotalMintableByWallet: Int! # uint16
  dropStage_startTime: BigInt! # uint48
  dropStage_endTime: BigInt! # uint48
  dropStage_dropStageIndex: Int! # uint8
  dropStage_maxTokenSupplyForStage: BigInt! # uint32
  dropStage_feeBps: Int! # uint16
  dropStage_restrictFeeRecipients: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type NewInstance @entity(immutable: true) {
  id: Bytes!
  instance: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  name: String!
  symbol: String!
}
