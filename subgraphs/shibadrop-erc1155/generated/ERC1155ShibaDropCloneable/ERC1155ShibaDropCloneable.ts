// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowListUpdated extends ethereum.Event {
  get params(): AllowListUpdated__Params {
    return new AllowListUpdated__Params(this);
  }
}

export class AllowListUpdated__Params {
  _event: AllowListUpdated;

  constructor(event: AllowListUpdated) {
    this._event = event;
  }

  get previousMerkleRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newMerkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get publicKeyURI(): Array<string> {
    return this._event.parameters[2].value.toStringArray();
  }

  get allowListURI(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class AllowedFeeRecipientUpdated extends ethereum.Event {
  get params(): AllowedFeeRecipientUpdated__Params {
    return new AllowedFeeRecipientUpdated__Params(this);
  }
}

export class AllowedFeeRecipientUpdated__Params {
  _event: AllowedFeeRecipientUpdated;

  constructor(event: AllowedFeeRecipientUpdated) {
    this._event = event;
  }

  get feeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class AllowedSeaportUpdated extends ethereum.Event {
  get params(): AllowedSeaportUpdated__Params {
    return new AllowedSeaportUpdated__Params(this);
  }
}

export class AllowedSeaportUpdated__Params {
  _event: AllowedSeaportUpdated;

  constructor(event: AllowedSeaportUpdated) {
    this._event = event;
  }

  get allowedShibaport(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isApproved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ContractURIUpdated extends ethereum.Event {
  get params(): ContractURIUpdated__Params {
    return new ContractURIUpdated__Params(this);
  }
}

export class ContractURIUpdated__Params {
  _event: ContractURIUpdated;

  constructor(event: ContractURIUpdated) {
    this._event = event;
  }

  get newContractURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CreatorPayoutsUpdated extends ethereum.Event {
  get params(): CreatorPayoutsUpdated__Params {
    return new CreatorPayoutsUpdated__Params(this);
  }
}

export class CreatorPayoutsUpdated__Params {
  _event: CreatorPayoutsUpdated;

  constructor(event: CreatorPayoutsUpdated) {
    this._event = event;
  }

  get creatorPayouts(): Array<CreatorPayoutsUpdatedCreatorPayoutsStruct> {
    return this._event.parameters[0].value.toTupleArray<CreatorPayoutsUpdatedCreatorPayoutsStruct>();
  }
}

export class CreatorPayoutsUpdatedCreatorPayoutsStruct extends ethereum.Tuple {
  get payoutAddress(): Address {
    return this[0].toAddress();
  }

  get basisPoints(): i32 {
    return this[1].toI32();
  }
}

export class DropURIUpdated extends ethereum.Event {
  get params(): DropURIUpdated__Params {
    return new DropURIUpdated__Params(this);
  }
}

export class DropURIUpdated__Params {
  _event: DropURIUpdated;

  constructor(event: DropURIUpdated) {
    this._event = event;
  }

  get newDropURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MaxSupplyUpdated extends ethereum.Event {
  get params(): MaxSupplyUpdated__Params {
    return new MaxSupplyUpdated__Params(this);
  }
}

export class MaxSupplyUpdated__Params {
  _event: MaxSupplyUpdated;

  constructor(event: MaxSupplyUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMaxSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipHandoverCanceled extends ethereum.Event {
  get params(): OwnershipHandoverCanceled__Params {
    return new OwnershipHandoverCanceled__Params(this);
  }
}

export class OwnershipHandoverCanceled__Params {
  _event: OwnershipHandoverCanceled;

  constructor(event: OwnershipHandoverCanceled) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipHandoverRequested extends ethereum.Event {
  get params(): OwnershipHandoverRequested__Params {
    return new OwnershipHandoverRequested__Params(this);
  }
}

export class OwnershipHandoverRequested__Params {
  _event: OwnershipHandoverRequested;

  constructor(event: OwnershipHandoverRequested) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PayerUpdated extends ethereum.Event {
  get params(): PayerUpdated__Params {
    return new PayerUpdated__Params(this);
  }
}

export class PayerUpdated__Params {
  _event: PayerUpdated;

  constructor(event: PayerUpdated) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ProvenanceHashUpdated extends ethereum.Event {
  get params(): ProvenanceHashUpdated__Params {
    return new ProvenanceHashUpdated__Params(this);
  }
}

export class ProvenanceHashUpdated__Params {
  _event: ProvenanceHashUpdated;

  constructor(event: ProvenanceHashUpdated) {
    this._event = event;
  }

  get previousHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class PublicDropUpdated extends ethereum.Event {
  get params(): PublicDropUpdated__Params {
    return new PublicDropUpdated__Params(this);
  }
}

export class PublicDropUpdated__Params {
  _event: PublicDropUpdated;

  constructor(event: PublicDropUpdated) {
    this._event = event;
  }

  get publicDrop(): PublicDropUpdatedPublicDropStruct {
    return changetype<PublicDropUpdatedPublicDropStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PublicDropUpdatedPublicDropStruct extends ethereum.Tuple {
  get startPrice(): BigInt {
    return this[0].toBigInt();
  }

  get endPrice(): BigInt {
    return this[1].toBigInt();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get restrictFeeRecipients(): boolean {
    return this[4].toBoolean();
  }

  get paymentToken(): Address {
    return this[5].toAddress();
  }

  get fromTokenId(): i32 {
    return this[6].toI32();
  }

  get toTokenId(): i32 {
    return this[7].toI32();
  }

  get maxTotalMintableByWallet(): i32 {
    return this[8].toI32();
  }

  get maxTotalMintableByWalletPerToken(): i32 {
    return this[9].toI32();
  }

  get feeBps(): i32 {
    return this[10].toI32();
  }
}

export class RoyaltyInfoUpdated extends ethereum.Event {
  get params(): RoyaltyInfoUpdated__Params {
    return new RoyaltyInfoUpdated__Params(this);
  }
}

export class RoyaltyInfoUpdated__Params {
  _event: RoyaltyInfoUpdated;

  constructor(event: RoyaltyInfoUpdated) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get basisPoints(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SeaDropMint extends ethereum.Event {
  get params(): SeaDropMint__Params {
    return new SeaDropMint__Params(this);
  }
}

export class SeaDropMint__Params {
  _event: SeaDropMint;

  constructor(event: SeaDropMint) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dropStageIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SeaDropTokenDeployed extends ethereum.Event {
  get params(): SeaDropTokenDeployed__Params {
    return new SeaDropTokenDeployed__Params(this);
  }
}

export class SeaDropTokenDeployed__Params {
  _event: SeaDropTokenDeployed;

  constructor(event: SeaDropTokenDeployed) {
    this._event = event;
  }

  get tokenType(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class SignerUpdated extends ethereum.Event {
  get params(): SignerUpdated__Params {
    return new SignerUpdated__Params(this);
  }
}

export class SignerUpdated__Params {
  _event: SignerUpdated;

  constructor(event: SignerUpdated) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferValidatorUpdated extends ethereum.Event {
  get params(): TransferValidatorUpdated__Params {
    return new TransferValidatorUpdated__Params(this);
  }
}

export class TransferValidatorUpdated__Params {
  _event: TransferValidatorUpdated;

  constructor(event: TransferValidatorUpdated) {
    this._event = event;
  }

  get oldValidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newValidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC1155ShibaDropCloneable__getTransferValidationFunctionResult {
  value0: Bytes;
  value1: boolean;

  constructor(value0: Bytes, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getFunctionSignature(): Bytes {
    return this.value0;
  }

  getIsViewFunction(): boolean {
    return this.value1;
  }
}

export class ERC1155ShibaDropCloneable__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class ERC1155ShibaDropCloneable extends ethereum.SmartContract {
  static bind(address: Address): ERC1155ShibaDropCloneable {
    return new ERC1155ShibaDropCloneable("ERC1155ShibaDropCloneable", address);
  }

  balanceOf(owner: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTransferValidationFunction(): ERC1155ShibaDropCloneable__getTransferValidationFunctionResult {
    let result = super.call(
      "getTransferValidationFunction",
      "getTransferValidationFunction():(bytes4,bool)",
      [],
    );

    return new ERC1155ShibaDropCloneable__getTransferValidationFunctionResult(
      result[0].toBytes(),
      result[1].toBoolean(),
    );
  }

  try_getTransferValidationFunction(): ethereum.CallResult<ERC1155ShibaDropCloneable__getTransferValidationFunctionResult> {
    let result = super.tryCall(
      "getTransferValidationFunction",
      "getTransferValidationFunction():(bytes4,bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC1155ShibaDropCloneable__getTransferValidationFunctionResult(
        value[0].toBytes(),
        value[1].toBoolean(),
      ),
    );
  }

  getTransferValidator(): Address {
    let result = super.call(
      "getTransferValidator",
      "getTransferValidator():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getTransferValidator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTransferValidator",
      "getTransferValidator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(tokenId: BigInt): BigInt {
    let result = super.call("maxSupply", "maxSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBigInt();
  }

  try_maxSupply(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownershipHandoverExpiresAt(pendingOwner: Address): BigInt {
    let result = super.call(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );

    return result[0].toBigInt();
  }

  try_ownershipHandoverExpiresAt(
    pendingOwner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownershipHandoverValidFor(): BigInt {
    let result = super.call(
      "ownershipHandoverValidFor",
      "ownershipHandoverValidFor():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ownershipHandoverValidFor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipHandoverValidFor",
      "ownershipHandoverValidFor():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provenanceHash(): Bytes {
    let result = super.call("provenanceHash", "provenanceHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_provenanceHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "provenanceHash",
      "provenanceHash():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt,
  ): ERC1155ShibaDropCloneable__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice),
      ],
    );

    return new ERC1155ShibaDropCloneable__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt,
  ): ethereum.CallResult<ERC1155ShibaDropCloneable__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC1155ShibaDropCloneable__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalMinted(tokenId: BigInt): BigInt {
    let result = super.call("totalMinted", "totalMinted(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBigInt();
  }

  try_totalMinted(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalMinted",
      "totalMinted(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(tokenId: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BatchBurnCall extends ethereum.Call {
  get inputs(): BatchBurnCall__Inputs {
    return new BatchBurnCall__Inputs(this);
  }

  get outputs(): BatchBurnCall__Outputs {
    return new BatchBurnCall__Outputs(this);
  }
}

export class BatchBurnCall__Inputs {
  _call: BatchBurnCall;

  constructor(call: BatchBurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchBurnCall__Outputs {
  _call: BatchBurnCall;

  constructor(call: BatchBurnCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CancelOwnershipHandoverCall__Inputs {
    return new CancelOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CancelOwnershipHandoverCall__Outputs {
    return new CancelOwnershipHandoverCall__Outputs(this);
  }
}

export class CancelOwnershipHandoverCall__Inputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall__Outputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CompleteOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CompleteOwnershipHandoverCall__Inputs {
    return new CompleteOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CompleteOwnershipHandoverCall__Outputs {
    return new CompleteOwnershipHandoverCall__Outputs(this);
  }
}

export class CompleteOwnershipHandoverCall__Inputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }

  get pendingOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompleteOwnershipHandoverCall__Outputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }
}

export class EmitBatchMetadataUpdateCall extends ethereum.Call {
  get inputs(): EmitBatchMetadataUpdateCall__Inputs {
    return new EmitBatchMetadataUpdateCall__Inputs(this);
  }

  get outputs(): EmitBatchMetadataUpdateCall__Outputs {
    return new EmitBatchMetadataUpdateCall__Outputs(this);
  }
}

export class EmitBatchMetadataUpdateCall__Inputs {
  _call: EmitBatchMetadataUpdateCall;

  constructor(call: EmitBatchMetadataUpdateCall) {
    this._call = call;
  }

  get fromTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmitBatchMetadataUpdateCall__Outputs {
  _call: EmitBatchMetadataUpdateCall;

  constructor(call: EmitBatchMetadataUpdateCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get allowedConfigurer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowedShibaport(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get initialOwner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall extends ethereum.Call {
  get inputs(): RequestOwnershipHandoverCall__Inputs {
    return new RequestOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): RequestOwnershipHandoverCall__Outputs {
    return new RequestOwnershipHandoverCall__Outputs(this);
  }
}

export class RequestOwnershipHandoverCall__Inputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall__Outputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isApproved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get newContractURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyCall__Inputs {
    return new SetDefaultRoyaltyCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyCall__Outputs {
    return new SetDefaultRoyaltyCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyCall__Inputs {
  _call: SetDefaultRoyaltyCall;

  constructor(call: SetDefaultRoyaltyCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeNumerator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyCall__Outputs {
  _call: SetDefaultRoyaltyCall;

  constructor(call: SetDefaultRoyaltyCall) {
    this._call = call;
  }
}

export class SetMaxSupplyCall extends ethereum.Call {
  get inputs(): SetMaxSupplyCall__Inputs {
    return new SetMaxSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxSupplyCall__Outputs {
    return new SetMaxSupplyCall__Outputs(this);
  }
}

export class SetMaxSupplyCall__Inputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMaxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxSupplyCall__Outputs {
  _call: SetMaxSupplyCall;

  constructor(call: SetMaxSupplyCall) {
    this._call = call;
  }
}

export class SetProvenanceHashCall extends ethereum.Call {
  get inputs(): SetProvenanceHashCall__Inputs {
    return new SetProvenanceHashCall__Inputs(this);
  }

  get outputs(): SetProvenanceHashCall__Outputs {
    return new SetProvenanceHashCall__Outputs(this);
  }
}

export class SetProvenanceHashCall__Inputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }

  get newProvenanceHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetProvenanceHashCall__Outputs {
  _call: SetProvenanceHashCall;

  constructor(call: SetProvenanceHashCall) {
    this._call = call;
  }
}

export class SetTransferValidatorCall extends ethereum.Call {
  get inputs(): SetTransferValidatorCall__Inputs {
    return new SetTransferValidatorCall__Inputs(this);
  }

  get outputs(): SetTransferValidatorCall__Outputs {
    return new SetTransferValidatorCall__Outputs(this);
  }
}

export class SetTransferValidatorCall__Inputs {
  _call: SetTransferValidatorCall;

  constructor(call: SetTransferValidatorCall) {
    this._call = call;
  }

  get newValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTransferValidatorCall__Outputs {
  _call: SetTransferValidatorCall;

  constructor(call: SetTransferValidatorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
